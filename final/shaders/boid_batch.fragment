#version 330 core

// Inputs from vertex shader
in vec3 fragNormal;
in vec3 fragPosition;
in vec3 fragColor;

// Lighting uniforms
uniform vec3 viewPos;        // Camera position
uniform vec3 lightPos;       // Light position
uniform vec3 lightColor;     // Light color
uniform float ambientStrength = 0.3;
uniform float specularStrength = 0.5;
uniform float shininess = 32.0;

// Output color
out vec4 outColor;

void main() {
    // Ambient lighting
    vec3 ambient = ambientStrength * lightColor;
    
    // Diffuse lighting
    vec3 lightDir = normalize(lightPos - fragPosition);
    float diff = max(dot(fragNormal, lightDir), 0.0);
    vec3 diffuse = diff * lightColor;
    
    // Specular lighting
    vec3 viewDir = normalize(viewPos - fragPosition);
    vec3 reflectDir = reflect(-lightDir, fragNormal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), shininess);
    vec3 specular = specularStrength * spec * lightColor;
    
    // Combine all lighting with object color
    vec3 result = (ambient + diffuse + specular) * fragColor;
    outColor = vec4(result, 1.0);
}